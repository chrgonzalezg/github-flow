#!/bin/bash

source git-hub-helpers

# Begin working on a new feature
start(){
	BRANCH=${1:?"Please specify a branch name."}
	git stash
	# Just a semantic `git checkout -b $BRANCH $MASTER`
	git checkout -b $BRANCH $MASTER
	git push --set-upstream origin $BRANCH
	git push origin $BRANCH
	git stash pop
}

# Make the feature branch available on the user's fork.
publish(){
	BRANCH=${1:-$CUR_BRANCH}

	git hub-feature update $BRANCH

	git push $ORIGIN $BRANCH
}

# Get all updates from upstream into the current branch.
# Can cause merge conflicts, when rebasing and when poping the stash.
update(){
	_stash
	BRANCH=${1:-$CUR_BRANCH}

	git checkout $MASTER
	echo "Rebasing upstream updates into master..."
	git pull $ORIGIN $MASTER
	echo "Rebasing master into $BRANCH..."
	git checkout $Q $BRANCH
	git rebase $Q $MASTER

	if [ $CUR_BRANCH != $BRANCH ] ; then
		git checkout $Q $CUR_BRANCH
	fi

	_stash_pop
}


# Close the feature branch, if it is mergeable.
finish(){
	BRANCH=${1:-$CUR_BRANCH}

	git hub-feature publish $BRANCH

	_stash
	git checkout $MASTER >/dev/null
	_stash_pop

	git pull --rebase $ORIGIN $MASTER
	git push $ORIGIN $BRANCH
	git branch -D $BRANCH
	git push origin --delete $BRANCH
	#else
	#	cat .tmp_merge | json message
	#fi

	#rm .tmp_merge
}

usage(){
	echo "$0:	Manage a github flow features."
}

help(){
	usage
	echo ""
	echo "	start <branchname>: Begin working on a new feature."
	echo "	publish [branchname]: Publish branch to origin. Defaults to current branch."
	echo "	update [branchname]: Pull changes from upstream into the development branch,"
	echo "	                     then rebase the branch off development."
	echo "	review [branchname]: Create a pull request for a feature."
	echo "	finish [branchname]: Merge a pull request and clean up branches."
	echo "	help: Show this message."
}

command=${1:-usage}
shift
case "$command" in
	s | start) start $@ ;;
	p | publish) publish $@ ;;
	u | update) update $@ ;;
	f | finish) finish $@ ;;
	h | help) help ;;
	*) usage ;;
esac
